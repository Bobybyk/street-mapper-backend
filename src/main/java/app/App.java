/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package app;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import app.map.PlanParser;
import app.map.PlanParser.InconsistentDataException;
import app.server.Server;

public class App {

    public static final int PORT = 12345;

    /**
     * Commentaire d'erreur en static pour la gestion de fichier
     */
    private final static String errorIllegalArgument =
            "[Erreur] Arguments invalides. Arguments Attendus : java App <file>";
    private final static String errorFileNotExist =
            "[Erreur] Fichier introuvable ou est un repertoire";
    private final static String errorIncorrectFile = "[Erreur] Le fichier est incorrect ";
    private final static String errorServeurStart = "[Erreur] Le serveur n'a pas demarr√©";
    
    public static void main(String[] args) {
        if (!argsIsOk(args)) {
            print(errorIllegalArgument);
            return;
        }

        final File mapFile = new File(args[0]);
        if (!isCVSFileOk(mapFile)) {
            print(errorFileNotExist);
            return;
        }
        
        try {                
            final Server server = new Server(mapFile.getPath(), PORT, true);    
            if (hasCsvTimeFile(args)) {
                server.updateTime((new File(args[1]).getPath()));;
            }
            
            server.start();
        } catch (FileNotFoundException e) {
            print(errorFileNotExist);
        } catch (PlanParser.IncorrectFileFormatException e) {
            print(errorIncorrectFile);
        } catch (IOException e) {
            print(errorServeurStart);
        } catch (InconsistentDataException e) {
            print(e.getMessage());
        }  
    }

    /**
     * Cette fonction renvoie un vrai si les arguments sont correctes s'ils respectent le formatage
     * ou faux si les arguments ne respectent pas le formatage
     *
     * @param args l'ensemble des arguments
     * @return boolean
     */
    public static boolean argsIsOk(String[] args) {
        return !(args.length < 1 || args.length > 4);
    }

    public static boolean hasCsvTimeFile(String[] args) {
        return args.length == 3;
    }

    private static boolean isCVSFileOk(File mapFile) {
        return mapFile.exists() && !mapFile.isDirectory();
    }

    /**
     * Fonction d'affichage
     *
     * @param msg le tableau des messages pour les faire afficher
     */
    private static void print(String... msg) {
        for (String line : msg)
            System.out.println(line);
    }
}
